// Maintainers, please refer to the style guide here:
//     https://developers.google.com/protocol-buffers/docs/style

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: datatrails-common-api/assets/v2/assets/merklelogentry.proto

package assets

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MerkeLogCommit provides the log entry details for a single mmr leaf.
type MerkleLogCommit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The mmr index
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// time ordered and strictly unique per tenant. system wide unique with very
	// reasonable operational assumptions. prefixed with time epoch if len > 8
	// bytes (after conversion back from hex).
	Idtimestamp   string `protobuf:"bytes,2,opt,name=idtimestamp,proto3" json:"idtimestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MerkleLogCommit) Reset() {
	*x = MerkleLogCommit{}
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MerkleLogCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleLogCommit) ProtoMessage() {}

func (x *MerkleLogCommit) ProtoReflect() protoreflect.Message {
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleLogCommit.ProtoReflect.Descriptor instead.
func (*MerkleLogCommit) Descriptor() ([]byte, []int) {
	return file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDescGZIP(), []int{0}
}

func (x *MerkleLogCommit) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *MerkleLogCommit) GetIdtimestamp() string {
	if x != nil {
		return x.Idtimestamp
	}
	return ""
}

type MerkleLogActiveItem struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TenantIdentity string                 `protobuf:"bytes,1,opt,name=tenant_identity,json=tenantIdentity,proto3" json:"tenant_identity,omitempty"`
	// -1 indicates not set
	Massif int64 `protobuf:"varint,2,opt,name=massif,proto3" json:"massif,omitempty"`
	// -1 indicates not set
	Seal int64 `protobuf:"varint,3,opt,name=seal,proto3" json:"seal,omitempty"`
	// the most recent last ids in the blob tag index for the massif and the seal
	MassifLastid  string `protobuf:"bytes,4,opt,name=massif_lastid,json=massifLastid,proto3" json:"massif_lastid,omitempty"`
	SealLastid    string `protobuf:"bytes,5,opt,name=seal_lastid,json=sealLastid,proto3" json:"seal_lastid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MerkleLogActiveItem) Reset() {
	*x = MerkleLogActiveItem{}
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MerkleLogActiveItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleLogActiveItem) ProtoMessage() {}

func (x *MerkleLogActiveItem) ProtoReflect() protoreflect.Message {
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleLogActiveItem.ProtoReflect.Descriptor instead.
func (*MerkleLogActiveItem) Descriptor() ([]byte, []int) {
	return file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDescGZIP(), []int{1}
}

func (x *MerkleLogActiveItem) GetTenantIdentity() string {
	if x != nil {
		return x.TenantIdentity
	}
	return ""
}

func (x *MerkleLogActiveItem) GetMassif() int64 {
	if x != nil {
		return x.Massif
	}
	return 0
}

func (x *MerkleLogActiveItem) GetSeal() int64 {
	if x != nil {
		return x.Seal
	}
	return 0
}

func (x *MerkleLogActiveItem) GetMassifLastid() string {
	if x != nil {
		return x.MassifLastid
	}
	return ""
}

func (x *MerkleLogActiveItem) GetSealLastid() string {
	if x != nil {
		return x.SealLastid
	}
	return ""
}

type MerkleLogActiveSince struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The idtimestamp used for the lastid > idtimestamp filter
	SinceIdtimestamp string `protobuf:"bytes,1,opt,name=since_idtimestamp,json=sinceIdtimestamp,proto3" json:"since_idtimestamp,omitempty"`
	// The regular unix time, in milliseconds, the watch set was create
	TimestampMs   int64                  `protobuf:"varint,2,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
	Items         []*MerkleLogActiveItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MerkleLogActiveSince) Reset() {
	*x = MerkleLogActiveSince{}
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MerkleLogActiveSince) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleLogActiveSince) ProtoMessage() {}

func (x *MerkleLogActiveSince) ProtoReflect() protoreflect.Message {
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleLogActiveSince.ProtoReflect.Descriptor instead.
func (*MerkleLogActiveSince) Descriptor() ([]byte, []int) {
	return file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDescGZIP(), []int{2}
}

func (x *MerkleLogActiveSince) GetSinceIdtimestamp() string {
	if x != nil {
		return x.SinceIdtimestamp
	}
	return ""
}

func (x *MerkleLogActiveSince) GetTimestampMs() int64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

func (x *MerkleLogActiveSince) GetItems() []*MerkleLogActiveItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type MerkleLogConfirm struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The following correspond to mmrblobs.MMRState
	MmrSize uint64 `protobuf:"varint,1,opt,name=mmr_size,json=mmrSize,proto3" json:"mmr_size,omitempty"`
	Root    []byte `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	// The regular unix time the root was signed
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The idtimestamp of the last leaf under mmr_size. prefixed with time epoch if len > 8 bytes (after conversion back from hex)
	Idtimestamp string `protobuf:"bytes,4,opt,name=idtimestamp,proto3" json:"idtimestamp,omitempty"`
	// The signed merkle tree head state at mmr_size. Contains COSE Sign1 formatted message.
	SignedTreeHead []byte `protobuf:"bytes,5,opt,name=signed_tree_head,json=signedTreeHead,proto3" json:"signed_tree_head,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MerkleLogConfirm) Reset() {
	*x = MerkleLogConfirm{}
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MerkleLogConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleLogConfirm) ProtoMessage() {}

func (x *MerkleLogConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleLogConfirm.ProtoReflect.Descriptor instead.
func (*MerkleLogConfirm) Descriptor() ([]byte, []int) {
	return file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDescGZIP(), []int{3}
}

func (x *MerkleLogConfirm) GetMmrSize() uint64 {
	if x != nil {
		return x.MmrSize
	}
	return 0
}

func (x *MerkleLogConfirm) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *MerkleLogConfirm) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MerkleLogConfirm) GetIdtimestamp() string {
	if x != nil {
		return x.Idtimestamp
	}
	return ""
}

func (x *MerkleLogConfirm) GetSignedTreeHead() []byte {
	if x != nil {
		return x.SignedTreeHead
	}
	return nil
}

type MerkleLogUnequivocal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MerkleLogUnequivocal) Reset() {
	*x = MerkleLogUnequivocal{}
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MerkleLogUnequivocal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleLogUnequivocal) ProtoMessage() {}

func (x *MerkleLogUnequivocal) ProtoReflect() protoreflect.Message {
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleLogUnequivocal.ProtoReflect.Descriptor instead.
func (*MerkleLogUnequivocal) Descriptor() ([]byte, []int) {
	return file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDescGZIP(), []int{4}
}

// The message sent from forestrie to avid notifying that the corresponding
// event is commited to the tenants log.
type MerkleLogCommitMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The tenant identity and the event identity for the committed event.
	TenantIdentity string `protobuf:"bytes,1,opt,name=tenant_identity,json=tenantIdentity,proto3" json:"tenant_identity,omitempty"`
	EventIdentity  string `protobuf:"bytes,2,opt,name=event_identity,json=eventIdentity,proto3" json:"event_identity,omitempty"`
	// The time portion of idtimestamp that contributed to the hash of the event
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Commit        *MerkleLogCommit       `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MerkleLogCommitMessage) Reset() {
	*x = MerkleLogCommitMessage{}
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MerkleLogCommitMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleLogCommitMessage) ProtoMessage() {}

func (x *MerkleLogCommitMessage) ProtoReflect() protoreflect.Message {
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleLogCommitMessage.ProtoReflect.Descriptor instead.
func (*MerkleLogCommitMessage) Descriptor() ([]byte, []int) {
	return file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDescGZIP(), []int{5}
}

func (x *MerkleLogCommitMessage) GetTenantIdentity() string {
	if x != nil {
		return x.TenantIdentity
	}
	return ""
}

func (x *MerkleLogCommitMessage) GetEventIdentity() string {
	if x != nil {
		return x.EventIdentity
	}
	return ""
}

func (x *MerkleLogCommitMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MerkleLogCommitMessage) GetCommit() *MerkleLogCommit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type MerkleLogConfirmMessage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TenantIdentity string                 `protobuf:"bytes,1,opt,name=tenant_identity,json=tenantIdentity,proto3" json:"tenant_identity,omitempty"`
	Confirm        *MerkleLogConfirm      `protobuf:"bytes,2,opt,name=confirm,proto3" json:"confirm,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MerkleLogConfirmMessage) Reset() {
	*x = MerkleLogConfirmMessage{}
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MerkleLogConfirmMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleLogConfirmMessage) ProtoMessage() {}

func (x *MerkleLogConfirmMessage) ProtoReflect() protoreflect.Message {
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleLogConfirmMessage.ProtoReflect.Descriptor instead.
func (*MerkleLogConfirmMessage) Descriptor() ([]byte, []int) {
	return file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDescGZIP(), []int{6}
}

func (x *MerkleLogConfirmMessage) GetTenantIdentity() string {
	if x != nil {
		return x.TenantIdentity
	}
	return ""
}

func (x *MerkleLogConfirmMessage) GetConfirm() *MerkleLogConfirm {
	if x != nil {
		return x.Confirm
	}
	return nil
}

type MerkleLogUnequivocalMessage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TenantIdentity string                 `protobuf:"bytes,1,opt,name=tenant_identity,json=tenantIdentity,proto3" json:"tenant_identity,omitempty"`
	Unequivocal    *MerkleLogUnequivocal  `protobuf:"bytes,2,opt,name=unequivocal,proto3" json:"unequivocal,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MerkleLogUnequivocalMessage) Reset() {
	*x = MerkleLogUnequivocalMessage{}
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MerkleLogUnequivocalMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleLogUnequivocalMessage) ProtoMessage() {}

func (x *MerkleLogUnequivocalMessage) ProtoReflect() protoreflect.Message {
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleLogUnequivocalMessage.ProtoReflect.Descriptor instead.
func (*MerkleLogUnequivocalMessage) Descriptor() ([]byte, []int) {
	return file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDescGZIP(), []int{7}
}

func (x *MerkleLogUnequivocalMessage) GetTenantIdentity() string {
	if x != nil {
		return x.TenantIdentity
	}
	return ""
}

func (x *MerkleLogUnequivocalMessage) GetUnequivocal() *MerkleLogUnequivocal {
	if x != nil {
		return x.Unequivocal
	}
	return nil
}

// The details stored in the SaaS db for a proof mech MERKLE_LOG commitment
type MerkleLogEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Event trust level COMMITTED details
	Commit *MerkleLogCommit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	// Event trust level CONFIRMED details
	Confirm *MerkleLogConfirm `protobuf:"bytes,2,opt,name=confirm,proto3" json:"confirm,omitempty"`
	// Event trust level UNEQUIVOCAL details
	Unequivocal   *MerkleLogUnequivocal `protobuf:"bytes,3,opt,name=unequivocal,proto3" json:"unequivocal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MerkleLogEntry) Reset() {
	*x = MerkleLogEntry{}
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MerkleLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleLogEntry) ProtoMessage() {}

func (x *MerkleLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleLogEntry.ProtoReflect.Descriptor instead.
func (*MerkleLogEntry) Descriptor() ([]byte, []int) {
	return file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDescGZIP(), []int{8}
}

func (x *MerkleLogEntry) GetCommit() *MerkleLogCommit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *MerkleLogEntry) GetConfirm() *MerkleLogConfirm {
	if x != nil {
		return x.Confirm
	}
	return nil
}

func (x *MerkleLogEntry) GetUnequivocal() *MerkleLogUnequivocal {
	if x != nil {
		return x.Unequivocal
	}
	return nil
}

var File_datatrails_common_api_assets_v2_assets_merklelogentry_proto protoreflect.FileDescriptor

const file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDesc = "" +
	"\n" +
	";datatrails-common-api/assets/v2/assets/merklelogentry.proto\x12\farchivist.v2\x1a\x1fgoogle/protobuf/timestamp.proto\"I\n" +
	"\x0fMerkleLogCommit\x12\x14\n" +
	"\x05index\x18\x01 \x01(\x04R\x05index\x12 \n" +
	"\vidtimestamp\x18\x02 \x01(\tR\vidtimestamp\"\xb0\x01\n" +
	"\x13MerkleLogActiveItem\x12'\n" +
	"\x0ftenant_identity\x18\x01 \x01(\tR\x0etenantIdentity\x12\x16\n" +
	"\x06massif\x18\x02 \x01(\x03R\x06massif\x12\x12\n" +
	"\x04seal\x18\x03 \x01(\x03R\x04seal\x12#\n" +
	"\rmassif_lastid\x18\x04 \x01(\tR\fmassifLastid\x12\x1f\n" +
	"\vseal_lastid\x18\x05 \x01(\tR\n" +
	"sealLastid\"\x9f\x01\n" +
	"\x14MerkleLogActiveSince\x12+\n" +
	"\x11since_idtimestamp\x18\x01 \x01(\tR\x10sinceIdtimestamp\x12!\n" +
	"\ftimestamp_ms\x18\x02 \x01(\x03R\vtimestampMs\x127\n" +
	"\x05items\x18\x03 \x03(\v2!.archivist.v2.MerkleLogActiveItemR\x05items\"\xab\x01\n" +
	"\x10MerkleLogConfirm\x12\x19\n" +
	"\bmmr_size\x18\x01 \x01(\x04R\ammrSize\x12\x12\n" +
	"\x04root\x18\x02 \x01(\fR\x04root\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12 \n" +
	"\vidtimestamp\x18\x04 \x01(\tR\vidtimestamp\x12(\n" +
	"\x10signed_tree_head\x18\x05 \x01(\fR\x0esignedTreeHead\"\x16\n" +
	"\x14MerkleLogUnequivocal\"\xd9\x01\n" +
	"\x16MerkleLogCommitMessage\x12'\n" +
	"\x0ftenant_identity\x18\x01 \x01(\tR\x0etenantIdentity\x12%\n" +
	"\x0eevent_identity\x18\x02 \x01(\tR\reventIdentity\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x125\n" +
	"\x06commit\x18\x04 \x01(\v2\x1d.archivist.v2.MerkleLogCommitR\x06commit\"|\n" +
	"\x17MerkleLogConfirmMessage\x12'\n" +
	"\x0ftenant_identity\x18\x01 \x01(\tR\x0etenantIdentity\x128\n" +
	"\aconfirm\x18\x02 \x01(\v2\x1e.archivist.v2.MerkleLogConfirmR\aconfirm\"\x8c\x01\n" +
	"\x1bMerkleLogUnequivocalMessage\x12'\n" +
	"\x0ftenant_identity\x18\x01 \x01(\tR\x0etenantIdentity\x12D\n" +
	"\vunequivocal\x18\x02 \x01(\v2\".archivist.v2.MerkleLogUnequivocalR\vunequivocal\"\xc7\x01\n" +
	"\x0eMerkleLogEntry\x125\n" +
	"\x06commit\x18\x01 \x01(\v2\x1d.archivist.v2.MerkleLogCommitR\x06commit\x128\n" +
	"\aconfirm\x18\x02 \x01(\v2\x1e.archivist.v2.MerkleLogConfirmR\aconfirm\x12D\n" +
	"\vunequivocal\x18\x03 \x01(\v2\".archivist.v2.MerkleLogUnequivocalR\vunequivocalBLZJgithub.com/datatrails/go-datatrails-common-api-gen/assets/v2/assets;assetsb\x06proto3"

var (
	file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDescOnce sync.Once
	file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDescData []byte
)

func file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDescGZIP() []byte {
	file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDescOnce.Do(func() {
		file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDesc), len(file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDesc)))
	})
	return file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDescData
}

var file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_goTypes = []any{
	(*MerkleLogCommit)(nil),             // 0: archivist.v2.MerkleLogCommit
	(*MerkleLogActiveItem)(nil),         // 1: archivist.v2.MerkleLogActiveItem
	(*MerkleLogActiveSince)(nil),        // 2: archivist.v2.MerkleLogActiveSince
	(*MerkleLogConfirm)(nil),            // 3: archivist.v2.MerkleLogConfirm
	(*MerkleLogUnequivocal)(nil),        // 4: archivist.v2.MerkleLogUnequivocal
	(*MerkleLogCommitMessage)(nil),      // 5: archivist.v2.MerkleLogCommitMessage
	(*MerkleLogConfirmMessage)(nil),     // 6: archivist.v2.MerkleLogConfirmMessage
	(*MerkleLogUnequivocalMessage)(nil), // 7: archivist.v2.MerkleLogUnequivocalMessage
	(*MerkleLogEntry)(nil),              // 8: archivist.v2.MerkleLogEntry
	(*timestamppb.Timestamp)(nil),       // 9: google.protobuf.Timestamp
}
var file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_depIdxs = []int32{
	1, // 0: archivist.v2.MerkleLogActiveSince.items:type_name -> archivist.v2.MerkleLogActiveItem
	9, // 1: archivist.v2.MerkleLogCommitMessage.timestamp:type_name -> google.protobuf.Timestamp
	0, // 2: archivist.v2.MerkleLogCommitMessage.commit:type_name -> archivist.v2.MerkleLogCommit
	3, // 3: archivist.v2.MerkleLogConfirmMessage.confirm:type_name -> archivist.v2.MerkleLogConfirm
	4, // 4: archivist.v2.MerkleLogUnequivocalMessage.unequivocal:type_name -> archivist.v2.MerkleLogUnequivocal
	0, // 5: archivist.v2.MerkleLogEntry.commit:type_name -> archivist.v2.MerkleLogCommit
	3, // 6: archivist.v2.MerkleLogEntry.confirm:type_name -> archivist.v2.MerkleLogConfirm
	4, // 7: archivist.v2.MerkleLogEntry.unequivocal:type_name -> archivist.v2.MerkleLogUnequivocal
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_init() }
func file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_init() {
	if File_datatrails_common_api_assets_v2_assets_merklelogentry_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDesc), len(file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_goTypes,
		DependencyIndexes: file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_depIdxs,
		MessageInfos:      file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_msgTypes,
	}.Build()
	File_datatrails_common_api_assets_v2_assets_merklelogentry_proto = out.File
	file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_goTypes = nil
	file_datatrails_common_api_assets_v2_assets_merklelogentry_proto_depIdxs = nil
}
