// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: datatrails-common-api/assets/v2/assets/merklelogentry.proto

package assets

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MerkleLogCommit with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MerkleLogCommit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MerkleLogCommit with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MerkleLogCommitMultiError, or nil if none found.
func (m *MerkleLogCommit) ValidateAll() error {
	return m.validate(true)
}

func (m *MerkleLogCommit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Index

	// no validation rules for Idtimestamp

	if len(errors) > 0 {
		return MerkleLogCommitMultiError(errors)
	}

	return nil
}

// MerkleLogCommitMultiError is an error wrapping multiple validation errors
// returned by MerkleLogCommit.ValidateAll() if the designated constraints
// aren't met.
type MerkleLogCommitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MerkleLogCommitMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MerkleLogCommitMultiError) AllErrors() []error { return m }

// MerkleLogCommitValidationError is the validation error returned by
// MerkleLogCommit.Validate if the designated constraints aren't met.
type MerkleLogCommitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerkleLogCommitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerkleLogCommitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerkleLogCommitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerkleLogCommitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerkleLogCommitValidationError) ErrorName() string { return "MerkleLogCommitValidationError" }

// Error satisfies the builtin error interface
func (e MerkleLogCommitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerkleLogCommit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerkleLogCommitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerkleLogCommitValidationError{}

// Validate checks the field values on MerkleLogActiveItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MerkleLogActiveItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MerkleLogActiveItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MerkleLogActiveItemMultiError, or nil if none found.
func (m *MerkleLogActiveItem) ValidateAll() error {
	return m.validate(true)
}

func (m *MerkleLogActiveItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantIdentity

	// no validation rules for Massif

	// no validation rules for Seal

	// no validation rules for MassifLastid

	// no validation rules for SealLastid

	if len(errors) > 0 {
		return MerkleLogActiveItemMultiError(errors)
	}

	return nil
}

// MerkleLogActiveItemMultiError is an error wrapping multiple validation
// errors returned by MerkleLogActiveItem.ValidateAll() if the designated
// constraints aren't met.
type MerkleLogActiveItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MerkleLogActiveItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MerkleLogActiveItemMultiError) AllErrors() []error { return m }

// MerkleLogActiveItemValidationError is the validation error returned by
// MerkleLogActiveItem.Validate if the designated constraints aren't met.
type MerkleLogActiveItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerkleLogActiveItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerkleLogActiveItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerkleLogActiveItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerkleLogActiveItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerkleLogActiveItemValidationError) ErrorName() string {
	return "MerkleLogActiveItemValidationError"
}

// Error satisfies the builtin error interface
func (e MerkleLogActiveItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerkleLogActiveItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerkleLogActiveItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerkleLogActiveItemValidationError{}

// Validate checks the field values on MerkleLogActiveSince with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MerkleLogActiveSince) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MerkleLogActiveSince with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MerkleLogActiveSinceMultiError, or nil if none found.
func (m *MerkleLogActiveSince) ValidateAll() error {
	return m.validate(true)
}

func (m *MerkleLogActiveSince) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SinceIdtimestamp

	// no validation rules for TimestampMs

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MerkleLogActiveSinceValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MerkleLogActiveSinceValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MerkleLogActiveSinceValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MerkleLogActiveSinceMultiError(errors)
	}

	return nil
}

// MerkleLogActiveSinceMultiError is an error wrapping multiple validation
// errors returned by MerkleLogActiveSince.ValidateAll() if the designated
// constraints aren't met.
type MerkleLogActiveSinceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MerkleLogActiveSinceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MerkleLogActiveSinceMultiError) AllErrors() []error { return m }

// MerkleLogActiveSinceValidationError is the validation error returned by
// MerkleLogActiveSince.Validate if the designated constraints aren't met.
type MerkleLogActiveSinceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerkleLogActiveSinceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerkleLogActiveSinceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerkleLogActiveSinceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerkleLogActiveSinceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerkleLogActiveSinceValidationError) ErrorName() string {
	return "MerkleLogActiveSinceValidationError"
}

// Error satisfies the builtin error interface
func (e MerkleLogActiveSinceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerkleLogActiveSince.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerkleLogActiveSinceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerkleLogActiveSinceValidationError{}

// Validate checks the field values on MerkleLogConfirm with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MerkleLogConfirm) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MerkleLogConfirm with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MerkleLogConfirmMultiError, or nil if none found.
func (m *MerkleLogConfirm) ValidateAll() error {
	return m.validate(true)
}

func (m *MerkleLogConfirm) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MmrSize

	// no validation rules for Root

	// no validation rules for Timestamp

	// no validation rules for Idtimestamp

	// no validation rules for SignedTreeHead

	if len(errors) > 0 {
		return MerkleLogConfirmMultiError(errors)
	}

	return nil
}

// MerkleLogConfirmMultiError is an error wrapping multiple validation errors
// returned by MerkleLogConfirm.ValidateAll() if the designated constraints
// aren't met.
type MerkleLogConfirmMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MerkleLogConfirmMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MerkleLogConfirmMultiError) AllErrors() []error { return m }

// MerkleLogConfirmValidationError is the validation error returned by
// MerkleLogConfirm.Validate if the designated constraints aren't met.
type MerkleLogConfirmValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerkleLogConfirmValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerkleLogConfirmValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerkleLogConfirmValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerkleLogConfirmValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerkleLogConfirmValidationError) ErrorName() string { return "MerkleLogConfirmValidationError" }

// Error satisfies the builtin error interface
func (e MerkleLogConfirmValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerkleLogConfirm.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerkleLogConfirmValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerkleLogConfirmValidationError{}

// Validate checks the field values on MerkleLogUnequivocal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MerkleLogUnequivocal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MerkleLogUnequivocal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MerkleLogUnequivocalMultiError, or nil if none found.
func (m *MerkleLogUnequivocal) ValidateAll() error {
	return m.validate(true)
}

func (m *MerkleLogUnequivocal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MerkleLogUnequivocalMultiError(errors)
	}

	return nil
}

// MerkleLogUnequivocalMultiError is an error wrapping multiple validation
// errors returned by MerkleLogUnequivocal.ValidateAll() if the designated
// constraints aren't met.
type MerkleLogUnequivocalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MerkleLogUnequivocalMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MerkleLogUnequivocalMultiError) AllErrors() []error { return m }

// MerkleLogUnequivocalValidationError is the validation error returned by
// MerkleLogUnequivocal.Validate if the designated constraints aren't met.
type MerkleLogUnequivocalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerkleLogUnequivocalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerkleLogUnequivocalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerkleLogUnequivocalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerkleLogUnequivocalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerkleLogUnequivocalValidationError) ErrorName() string {
	return "MerkleLogUnequivocalValidationError"
}

// Error satisfies the builtin error interface
func (e MerkleLogUnequivocalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerkleLogUnequivocal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerkleLogUnequivocalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerkleLogUnequivocalValidationError{}

// Validate checks the field values on MerkleLogCommitMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MerkleLogCommitMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MerkleLogCommitMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MerkleLogCommitMessageMultiError, or nil if none found.
func (m *MerkleLogCommitMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *MerkleLogCommitMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantIdentity

	// no validation rules for EventIdentity

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MerkleLogCommitMessageValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MerkleLogCommitMessageValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MerkleLogCommitMessageValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCommit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MerkleLogCommitMessageValidationError{
					field:  "Commit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MerkleLogCommitMessageValidationError{
					field:  "Commit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MerkleLogCommitMessageValidationError{
				field:  "Commit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MerkleLogCommitMessageMultiError(errors)
	}

	return nil
}

// MerkleLogCommitMessageMultiError is an error wrapping multiple validation
// errors returned by MerkleLogCommitMessage.ValidateAll() if the designated
// constraints aren't met.
type MerkleLogCommitMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MerkleLogCommitMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MerkleLogCommitMessageMultiError) AllErrors() []error { return m }

// MerkleLogCommitMessageValidationError is the validation error returned by
// MerkleLogCommitMessage.Validate if the designated constraints aren't met.
type MerkleLogCommitMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerkleLogCommitMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerkleLogCommitMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerkleLogCommitMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerkleLogCommitMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerkleLogCommitMessageValidationError) ErrorName() string {
	return "MerkleLogCommitMessageValidationError"
}

// Error satisfies the builtin error interface
func (e MerkleLogCommitMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerkleLogCommitMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerkleLogCommitMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerkleLogCommitMessageValidationError{}

// Validate checks the field values on MerkleLogConfirmMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MerkleLogConfirmMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MerkleLogConfirmMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MerkleLogConfirmMessageMultiError, or nil if none found.
func (m *MerkleLogConfirmMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *MerkleLogConfirmMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantIdentity

	if all {
		switch v := interface{}(m.GetConfirm()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MerkleLogConfirmMessageValidationError{
					field:  "Confirm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MerkleLogConfirmMessageValidationError{
					field:  "Confirm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfirm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MerkleLogConfirmMessageValidationError{
				field:  "Confirm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MerkleLogConfirmMessageMultiError(errors)
	}

	return nil
}

// MerkleLogConfirmMessageMultiError is an error wrapping multiple validation
// errors returned by MerkleLogConfirmMessage.ValidateAll() if the designated
// constraints aren't met.
type MerkleLogConfirmMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MerkleLogConfirmMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MerkleLogConfirmMessageMultiError) AllErrors() []error { return m }

// MerkleLogConfirmMessageValidationError is the validation error returned by
// MerkleLogConfirmMessage.Validate if the designated constraints aren't met.
type MerkleLogConfirmMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerkleLogConfirmMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerkleLogConfirmMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerkleLogConfirmMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerkleLogConfirmMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerkleLogConfirmMessageValidationError) ErrorName() string {
	return "MerkleLogConfirmMessageValidationError"
}

// Error satisfies the builtin error interface
func (e MerkleLogConfirmMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerkleLogConfirmMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerkleLogConfirmMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerkleLogConfirmMessageValidationError{}

// Validate checks the field values on MerkleLogUnequivocalMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MerkleLogUnequivocalMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MerkleLogUnequivocalMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MerkleLogUnequivocalMessageMultiError, or nil if none found.
func (m *MerkleLogUnequivocalMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *MerkleLogUnequivocalMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantIdentity

	if all {
		switch v := interface{}(m.GetUnequivocal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MerkleLogUnequivocalMessageValidationError{
					field:  "Unequivocal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MerkleLogUnequivocalMessageValidationError{
					field:  "Unequivocal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnequivocal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MerkleLogUnequivocalMessageValidationError{
				field:  "Unequivocal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MerkleLogUnequivocalMessageMultiError(errors)
	}

	return nil
}

// MerkleLogUnequivocalMessageMultiError is an error wrapping multiple
// validation errors returned by MerkleLogUnequivocalMessage.ValidateAll() if
// the designated constraints aren't met.
type MerkleLogUnequivocalMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MerkleLogUnequivocalMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MerkleLogUnequivocalMessageMultiError) AllErrors() []error { return m }

// MerkleLogUnequivocalMessageValidationError is the validation error returned
// by MerkleLogUnequivocalMessage.Validate if the designated constraints
// aren't met.
type MerkleLogUnequivocalMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerkleLogUnequivocalMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerkleLogUnequivocalMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerkleLogUnequivocalMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerkleLogUnequivocalMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerkleLogUnequivocalMessageValidationError) ErrorName() string {
	return "MerkleLogUnequivocalMessageValidationError"
}

// Error satisfies the builtin error interface
func (e MerkleLogUnequivocalMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerkleLogUnequivocalMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerkleLogUnequivocalMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerkleLogUnequivocalMessageValidationError{}

// Validate checks the field values on MerkleLogEntry with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MerkleLogEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MerkleLogEntry with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MerkleLogEntryMultiError,
// or nil if none found.
func (m *MerkleLogEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *MerkleLogEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MerkleLogEntryValidationError{
					field:  "Commit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MerkleLogEntryValidationError{
					field:  "Commit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MerkleLogEntryValidationError{
				field:  "Commit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfirm()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MerkleLogEntryValidationError{
					field:  "Confirm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MerkleLogEntryValidationError{
					field:  "Confirm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfirm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MerkleLogEntryValidationError{
				field:  "Confirm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUnequivocal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MerkleLogEntryValidationError{
					field:  "Unequivocal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MerkleLogEntryValidationError{
					field:  "Unequivocal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnequivocal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MerkleLogEntryValidationError{
				field:  "Unequivocal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MerkleLogEntryMultiError(errors)
	}

	return nil
}

// MerkleLogEntryMultiError is an error wrapping multiple validation errors
// returned by MerkleLogEntry.ValidateAll() if the designated constraints
// aren't met.
type MerkleLogEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MerkleLogEntryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MerkleLogEntryMultiError) AllErrors() []error { return m }

// MerkleLogEntryValidationError is the validation error returned by
// MerkleLogEntry.Validate if the designated constraints aren't met.
type MerkleLogEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerkleLogEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerkleLogEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerkleLogEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerkleLogEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerkleLogEntryValidationError) ErrorName() string { return "MerkleLogEntryValidationError" }

// Error satisfies the builtin error interface
func (e MerkleLogEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerkleLogEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerkleLogEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerkleLogEntryValidationError{}
