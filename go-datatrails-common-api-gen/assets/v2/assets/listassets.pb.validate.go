// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: datatrails-common-api/assets/v2/assets/listassets.proto

package assets

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListAssetsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAssetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAssetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAssetsRequestMultiError, or nil if none found.
func (m *ListAssetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAssetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() < 0 {
		err := ListAssetsRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	// no validation rules for OrderBy

	// no validation rules for Tracked

	// no validation rules for ConfirmationStatus

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			if l := utf8.RuneCountInString(key); l < 1 || l > 1024 {
				err := ListAssetsRequestValidationError{
					field:  fmt.Sprintf("Attributes[%v]", key),
					reason: "value length must be between 1 and 1024 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_ListAssetsRequest_Attributes_Pattern.MatchString(key) {
				err := ListAssetsRequestValidationError{
					field:  fmt.Sprintf("Attributes[%v]", key),
					reason: "value does not match regex pattern \"^[^[:cntrl:]]+$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Attributes[key]
		}
	}

	// no validation rules for ProofMechanism

	// no validation rules for ChainId

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAssetsRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAssetsRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAssetsRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if _, ok := Privacy_name[int32(m.GetPrivacy())]; !ok {
		err := ListAssetsRequestValidationError{
			field:  "Privacy",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListAssetsRequestMultiError(errors)
	}

	return nil
}

// ListAssetsRequestMultiError is an error wrapping multiple validation errors
// returned by ListAssetsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAssetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAssetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAssetsRequestMultiError) AllErrors() []error { return m }

// ListAssetsRequestValidationError is the validation error returned by
// ListAssetsRequest.Validate if the designated constraints aren't met.
type ListAssetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssetsRequestValidationError) ErrorName() string {
	return "ListAssetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssetsRequestValidationError{}

var _ListAssetsRequest_Attributes_Pattern = regexp.MustCompile("^[^[:cntrl:]]+$")

// Validate checks the field values on ListAssetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAssetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAssetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAssetsResponseMultiError, or nil if none found.
func (m *ListAssetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAssetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAssets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAssetsResponseValidationError{
						field:  fmt.Sprintf("Assets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAssetsResponseValidationError{
						field:  fmt.Sprintf("Assets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAssetsResponseValidationError{
					field:  fmt.Sprintf("Assets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListAssetsResponseMultiError(errors)
	}

	return nil
}

// ListAssetsResponseMultiError is an error wrapping multiple validation errors
// returned by ListAssetsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAssetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAssetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAssetsResponseMultiError) AllErrors() []error { return m }

// ListAssetsResponseValidationError is the validation error returned by
// ListAssetsResponse.Validate if the designated constraints aren't met.
type ListAssetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssetsResponseValidationError) ErrorName() string {
	return "ListAssetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssetsResponseValidationError{}
