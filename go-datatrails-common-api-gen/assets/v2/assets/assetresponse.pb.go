// Maintainers, please refer to the style guide here:
//     https://developers.google.com/protocol-buffers/docs/style

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: datatrails-common-api/assets/v2/assets/assetresponse.proto

package assets

import (
	reflect "reflect"
	sync "sync"

	attribute "github.com/datatrails/go-datatrails-simplehash/go-datatrails-common-api-gen/attribute/v2/attribute"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The full set of properties common to all assets. Note that some of these properies are synthesized by the system. Individual apis will clarify which properties the accept and require. Assets may have one or more representative images. Those will be included in the attachments list. The label for those attachements is up to the UI
// Note that there is no PATCH or PUT for assets as they are immutable and "changes" are merely aggregated events on the identified asset, therefore mutable fields; display_name, extended_attributes, type_attributes, tracked and attachments, will each require an Event to change (see Events below).
type AssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// asset identity
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	// list of enabled behaviours
	Behaviours []string `protobuf:"bytes,2,rep,name=behaviours,proto3" json:"behaviours,omitempty"`
	// all the assets attributes
	Attributes map[string]*attribute.Attribute `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// indicated if asset has been committed to the blockchain, possible values are CONFIRMED for committed, PENDING for not yet committed or FAILED for permanent failure
	ConfirmationStatus ConfirmationStatus `protobuf:"varint,4,opt,name=confirmation_status,json=confirmationStatus,proto3,enum=archivist.v2.ConfirmationStatus" json:"confirmation_status,omitempty"`
	// indicates if asset is being tracked in the system TRACKED or NOT_TRACKED
	Tracked TrackedStatus `protobuf:"varint,5,opt,name=tracked,proto3,enum=archivist.v2.TrackedStatus" json:"tracked,omitempty"`
	// describes the access policy for this asset
	AccessPolicy map[string]*attribute.Attribute `protobuf:"bytes,6,rep,name=access_policy,json=accessPolicy,proto3" json:"access_policy,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// wallet address for the owner of this asset
	Owner          string                 `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
	AtTime         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
	ProofMechanism ProofMechanism         `protobuf:"varint,10,opt,name=proof_mechanism,json=proofMechanism,proto3,enum=archivist.v2.ProofMechanism" json:"proof_mechanism,omitempty"`
	ChainId        string                 `protobuf:"bytes,11,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Public         bool                   `protobuf:"varint,12,opt,name=public,proto3" json:"public,omitempty"`
	TenantIdentity string                 `protobuf:"bytes,13,opt,name=tenant_identity,json=tenantIdentity,proto3" json:"tenant_identity,omitempty"`
}

func (x *AssetResponse) Reset() {
	*x = AssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatrails_common_api_assets_v2_assets_assetresponse_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetResponse) ProtoMessage() {}

func (x *AssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datatrails_common_api_assets_v2_assets_assetresponse_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetResponse.ProtoReflect.Descriptor instead.
func (*AssetResponse) Descriptor() ([]byte, []int) {
	return file_datatrails_common_api_assets_v2_assets_assetresponse_proto_rawDescGZIP(), []int{0}
}

func (x *AssetResponse) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *AssetResponse) GetBehaviours() []string {
	if x != nil {
		return x.Behaviours
	}
	return nil
}

func (x *AssetResponse) GetAttributes() map[string]*attribute.Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *AssetResponse) GetConfirmationStatus() ConfirmationStatus {
	if x != nil {
		return x.ConfirmationStatus
	}
	return ConfirmationStatus_CONFIRMATION_STATUS_UNSPECIFIED
}

func (x *AssetResponse) GetTracked() TrackedStatus {
	if x != nil {
		return x.Tracked
	}
	return TrackedStatus_TRACKED_STATUS_UNSPECIFIED
}

func (x *AssetResponse) GetAccessPolicy() map[string]*attribute.Attribute {
	if x != nil {
		return x.AccessPolicy
	}
	return nil
}

func (x *AssetResponse) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *AssetResponse) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

func (x *AssetResponse) GetProofMechanism() ProofMechanism {
	if x != nil {
		return x.ProofMechanism
	}
	return ProofMechanism_PROOF_MECHANISM_UNSPECIFIED
}

func (x *AssetResponse) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *AssetResponse) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *AssetResponse) GetTenantIdentity() string {
	if x != nil {
		return x.TenantIdentity
	}
	return ""
}

var File_datatrails_common_api_assets_v2_assets_assetresponse_proto protoreflect.FileDescriptor

var file_datatrails_common_api_assets_v2_assets_assetresponse_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76,
	0x32, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x64, 0x61, 0x74,
	0x61, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x3c, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2f, 0x76, 0x32, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x11,
	0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x29, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x20, 0x60, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d,
	0x60, 0x40, 0x01, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a,
	0x0a, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x0a, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x77, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2a,
	0x92, 0x41, 0x27, 0x32, 0x25, 0x6b, 0x65, 0x79, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x20,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x52, 0x92, 0x41, 0x4f, 0x32, 0x47, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x40, 0x01, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7e,
	0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x47, 0x92, 0x41,
	0x44, 0x32, 0x3c, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x20, 0x69, 0x73, 0x20, 0x73, 0x74,
	0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x40,
	0x01, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x8b,
	0x01, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69,
	0x73, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x32, 0x6b, 0x65, 0x79, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66,
	0x20, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x52, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25,
	0x32, 0x21, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x40, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x07,
	0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x25,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x73,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x40, 0x01, 0x52, 0x06, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x7e, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69,
	0x73, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x63,
	0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x2e, 0x74, 0x68, 0x65,
	0x20, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x65, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x9a, 0x02, 0x01, 0x07, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12,
	0x57, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x32, 0x35, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x20, 0x69, 0x64,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x40, 0x01, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x12, 0x63, 0x0a, 0x0f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41,
	0x37, 0x32, 0x32, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x78, 0x80, 0x08, 0x52, 0x0e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x56, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x58, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69,
	0x73, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0xc6, 0x06, 0x92, 0x41, 0xc2,
	0x06, 0x0a, 0x1a, 0x32, 0x18, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x32, 0xa3, 0x06,
	0x7b, 0x20, 0x22, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x33, 0x30, 0x32, 0x33, 0x35, 0x2d, 0x31,
	0x34, 0x32, 0x34, 0x2d, 0x34, 0x66, 0x64, 0x61, 0x2d, 0x38, 0x34, 0x30, 0x61, 0x2d, 0x64, 0x35,
	0x65, 0x66, 0x38, 0x32, 0x63, 0x34, 0x63, 0x39, 0x36, 0x66, 0x22, 0x2c, 0x20, 0x22, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x22, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x5d, 0x2c, 0x20, 0x22,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x3a, 0x20, 0x7b, 0x20, 0x20,
	0x20, 0x20, 0x22, 0x61, 0x72, 0x63, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x20, 0x22, 0x33, 0x2e, 0x32, 0x2e, 0x31,
	0x22, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x22, 0x61, 0x72, 0x63, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x61, 0x72,
	0x63, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2f, 0x31,
	0x37, 0x35, 0x34, 0x62, 0x39, 0x32, 0x30, 0x2d, 0x63, 0x66, 0x32, 0x30, 0x2d, 0x34, 0x64, 0x37,
	0x65, 0x2d, 0x39, 0x64, 0x33, 0x36, 0x2d, 0x39, 0x65, 0x64, 0x37, 0x64, 0x34, 0x37, 0x39, 0x37,
	0x34, 0x34, 0x64, 0x22, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x22, 0x61, 0x72, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x3a, 0x20, 0x22, 0x30, 0x31, 0x62, 0x61, 0x34, 0x37, 0x31, 0x39, 0x63, 0x38, 0x30, 0x62, 0x36,
	0x66, 0x65, 0x39, 0x31, 0x31, 0x62, 0x30, 0x39, 0x31, 0x61, 0x37, 0x63, 0x30, 0x35, 0x31, 0x32,
	0x34, 0x62, 0x36, 0x34, 0x65, 0x65, 0x65, 0x63, 0x65, 0x39, 0x36, 0x34, 0x65, 0x30, 0x39, 0x63,
	0x30, 0x35, 0x38, 0x65, 0x66, 0x38, 0x66, 0x39, 0x38, 0x30, 0x35, 0x64, 0x61, 0x63, 0x61, 0x35,
	0x34, 0x36, 0x62, 0x22, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x22, 0x61, 0x72, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x22, 0x2c, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x61, 0x72, 0x63, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x61, 0x6c, 0x67, 0x22, 0x3a, 0x20, 0x22, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x22,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x20, 0x20, 0x5d, 0x2c, 0x20, 0x20, 0x20,
	0x22, 0x61, 0x72, 0x63, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x34, 0x32, 0x30, 0x35, 0x34, 0x66, 0x31,
	0x30, 0x2d, 0x39, 0x39, 0x35, 0x32, 0x2d, 0x34, 0x63, 0x31, 0x30, 0x2d, 0x61, 0x30, 0x38, 0x32,
	0x2d, 0x39, 0x66, 0x64, 0x30, 0x64, 0x31, 0x30, 0x32, 0x39, 0x35, 0x61, 0x65, 0x22, 0x7d, 0x2c,
	0x20, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3a, 0x20, 0x22, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x22, 0x2c, 0x20, 0x22, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x54,
	0x52, 0x41, 0x43, 0x4b, 0x45, 0x44, 0x22, 0x2c, 0x20, 0x22, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22,
	0x3a, 0x20, 0x22, 0x30, 0x78, 0x36, 0x30, 0x31, 0x66, 0x35, 0x41, 0x37, 0x44, 0x33, 0x65, 0x36,
	0x64, 0x63, 0x42, 0x35, 0x35, 0x65, 0x38, 0x37, 0x62, 0x66, 0x32, 0x46, 0x31, 0x37, 0x62, 0x43,
	0x38, 0x41, 0x32, 0x37, 0x41, 0x61, 0x43, 0x44, 0x33, 0x35, 0x31, 0x31, 0x22, 0x2c, 0x22, 0x61,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x32, 0x30, 0x31, 0x39, 0x2d, 0x31,
	0x31, 0x2d, 0x32, 0x37, 0x54, 0x31, 0x34, 0x3a, 0x34, 0x34, 0x3a, 0x31, 0x39, 0x5a, 0x22, 0x2c,
	0x22, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x22, 0x3a, 0x20, 0x22, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x22,
	0x2c, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x2c, 0x22, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0x3a, 0x20, 0x22, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x38, 0x65, 0x30, 0x62,
	0x36, 0x30, 0x30, 0x63, 0x2d, 0x38, 0x32, 0x33, 0x34, 0x2d, 0x34, 0x33, 0x65, 0x34, 0x2d, 0x38,
	0x36, 0x30, 0x63, 0x2d, 0x65, 0x39, 0x35, 0x62, 0x64, 0x63, 0x64, 0x36, 0x39, 0x35, 0x61, 0x39,
	0x22, 0x20, 0x7d, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x42, 0x4c, 0x5a, 0x4a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x73, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67,
	0x65, 0x6e, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x3b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_datatrails_common_api_assets_v2_assets_assetresponse_proto_rawDescOnce sync.Once
	file_datatrails_common_api_assets_v2_assets_assetresponse_proto_rawDescData = file_datatrails_common_api_assets_v2_assets_assetresponse_proto_rawDesc
)

func file_datatrails_common_api_assets_v2_assets_assetresponse_proto_rawDescGZIP() []byte {
	file_datatrails_common_api_assets_v2_assets_assetresponse_proto_rawDescOnce.Do(func() {
		file_datatrails_common_api_assets_v2_assets_assetresponse_proto_rawDescData = protoimpl.X.CompressGZIP(file_datatrails_common_api_assets_v2_assets_assetresponse_proto_rawDescData)
	})
	return file_datatrails_common_api_assets_v2_assets_assetresponse_proto_rawDescData
}

var file_datatrails_common_api_assets_v2_assets_assetresponse_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_datatrails_common_api_assets_v2_assets_assetresponse_proto_goTypes = []interface{}{
	(*AssetResponse)(nil),         // 0: archivist.v2.AssetResponse
	nil,                           // 1: archivist.v2.AssetResponse.AttributesEntry
	nil,                           // 2: archivist.v2.AssetResponse.AccessPolicyEntry
	(ConfirmationStatus)(0),       // 3: archivist.v2.ConfirmationStatus
	(TrackedStatus)(0),            // 4: archivist.v2.TrackedStatus
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
	(ProofMechanism)(0),           // 6: archivist.v2.ProofMechanism
	(*attribute.Attribute)(nil),   // 7: archivist.v2.Attribute
}
var file_datatrails_common_api_assets_v2_assets_assetresponse_proto_depIdxs = []int32{
	1, // 0: archivist.v2.AssetResponse.attributes:type_name -> archivist.v2.AssetResponse.AttributesEntry
	3, // 1: archivist.v2.AssetResponse.confirmation_status:type_name -> archivist.v2.ConfirmationStatus
	4, // 2: archivist.v2.AssetResponse.tracked:type_name -> archivist.v2.TrackedStatus
	2, // 3: archivist.v2.AssetResponse.access_policy:type_name -> archivist.v2.AssetResponse.AccessPolicyEntry
	5, // 4: archivist.v2.AssetResponse.at_time:type_name -> google.protobuf.Timestamp
	6, // 5: archivist.v2.AssetResponse.proof_mechanism:type_name -> archivist.v2.ProofMechanism
	7, // 6: archivist.v2.AssetResponse.AttributesEntry.value:type_name -> archivist.v2.Attribute
	7, // 7: archivist.v2.AssetResponse.AccessPolicyEntry.value:type_name -> archivist.v2.Attribute
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_datatrails_common_api_assets_v2_assets_assetresponse_proto_init() }
func file_datatrails_common_api_assets_v2_assets_assetresponse_proto_init() {
	if File_datatrails_common_api_assets_v2_assets_assetresponse_proto != nil {
		return
	}
	file_datatrails_common_api_assets_v2_assets_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_datatrails_common_api_assets_v2_assets_assetresponse_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_datatrails_common_api_assets_v2_assets_assetresponse_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_datatrails_common_api_assets_v2_assets_assetresponse_proto_goTypes,
		DependencyIndexes: file_datatrails_common_api_assets_v2_assets_assetresponse_proto_depIdxs,
		MessageInfos:      file_datatrails_common_api_assets_v2_assets_assetresponse_proto_msgTypes,
	}.Build()
	File_datatrails_common_api_assets_v2_assets_assetresponse_proto = out.File
	file_datatrails_common_api_assets_v2_assets_assetresponse_proto_rawDesc = nil
	file_datatrails_common_api_assets_v2_assets_assetresponse_proto_goTypes = nil
	file_datatrails_common_api_assets_v2_assets_assetresponse_proto_depIdxs = nil
}
