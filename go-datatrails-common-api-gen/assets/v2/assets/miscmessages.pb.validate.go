// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: datatrails-common-api/assets/v2/assets/miscmessages.proto

package assets

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EventCommitMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventCommitMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventCommitMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventCommitMessageMultiError, or nil if none found.
func (m *EventCommitMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *EventCommitMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventCommitMessageValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventCommitMessageValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventCommitMessageValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for KhipuPackedInputVer

	// no validation rules for KhipuPackedAssemblyInputs

	// no validation rules for KhipuPackedCommitInput

	if len(errors) > 0 {
		return EventCommitMessageMultiError(errors)
	}

	return nil
}

// EventCommitMessageMultiError is an error wrapping multiple validation errors
// returned by EventCommitMessage.ValidateAll() if the designated constraints
// aren't met.
type EventCommitMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventCommitMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventCommitMessageMultiError) AllErrors() []error { return m }

// EventCommitMessageValidationError is the validation error returned by
// EventCommitMessage.Validate if the designated constraints aren't met.
type EventCommitMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventCommitMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventCommitMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventCommitMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventCommitMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventCommitMessageValidationError) ErrorName() string {
	return "EventCommitMessageValidationError"
}

// Error satisfies the builtin error interface
func (e EventCommitMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventCommitMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventCommitMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventCommitMessageValidationError{}

// Validate checks the field values on EventReceiptMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventReceiptMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventReceiptMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventReceiptMessageMultiError, or nil if none found.
func (m *EventReceiptMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *EventReceiptMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventReceiptMessageValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventReceiptMessageValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventReceiptMessageValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CommitTransactionHash

	if len(errors) > 0 {
		return EventReceiptMessageMultiError(errors)
	}

	return nil
}

// EventReceiptMessageMultiError is an error wrapping multiple validation
// errors returned by EventReceiptMessage.ValidateAll() if the designated
// constraints aren't met.
type EventReceiptMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventReceiptMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventReceiptMessageMultiError) AllErrors() []error { return m }

// EventReceiptMessageValidationError is the validation error returned by
// EventReceiptMessage.Validate if the designated constraints aren't met.
type EventReceiptMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventReceiptMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventReceiptMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventReceiptMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventReceiptMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventReceiptMessageValidationError) ErrorName() string {
	return "EventReceiptMessageValidationError"
}

// Error satisfies the builtin error interface
func (e EventReceiptMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventReceiptMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventReceiptMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventReceiptMessageValidationError{}

// Validate checks the field values on PublicAssetURLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicAssetURLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicAssetURLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicAssetURLResponseMultiError, or nil if none found.
func (m *PublicAssetURLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicAssetURLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Publicurl

	if len(errors) > 0 {
		return PublicAssetURLResponseMultiError(errors)
	}

	return nil
}

// PublicAssetURLResponseMultiError is an error wrapping multiple validation
// errors returned by PublicAssetURLResponse.ValidateAll() if the designated
// constraints aren't met.
type PublicAssetURLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicAssetURLResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicAssetURLResponseMultiError) AllErrors() []error { return m }

// PublicAssetURLResponseValidationError is the validation error returned by
// PublicAssetURLResponse.Validate if the designated constraints aren't met.
type PublicAssetURLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicAssetURLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicAssetURLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicAssetURLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicAssetURLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicAssetURLResponseValidationError) ErrorName() string {
	return "PublicAssetURLResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublicAssetURLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicAssetURLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicAssetURLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicAssetURLResponseValidationError{}

// Validate checks the field values on PublicEventURLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicEventURLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicEventURLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicEventURLResponseMultiError, or nil if none found.
func (m *PublicEventURLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicEventURLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Publicurl

	if len(errors) > 0 {
		return PublicEventURLResponseMultiError(errors)
	}

	return nil
}

// PublicEventURLResponseMultiError is an error wrapping multiple validation
// errors returned by PublicEventURLResponse.ValidateAll() if the designated
// constraints aren't met.
type PublicEventURLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicEventURLResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicEventURLResponseMultiError) AllErrors() []error { return m }

// PublicEventURLResponseValidationError is the validation error returned by
// PublicEventURLResponse.Validate if the designated constraints aren't met.
type PublicEventURLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicEventURLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicEventURLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicEventURLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicEventURLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicEventURLResponseValidationError) ErrorName() string {
	return "PublicEventURLResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublicEventURLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicEventURLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicEventURLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicEventURLResponseValidationError{}
