// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: datatrails-common-api/assets/v2/assets/publicassets.proto

// Contains the generated protocol definitions for the registration protocol.
// Registrar clients, service proxies and the archivist service will all use
// these.
// Maintainers, please refer to the style guide here:
//     https://developers.google.com/protocol-buffers/docs/style

package assets

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PublicAssets_GetPublicEvent_FullMethodName   = "/archivist.v2.PublicAssets/GetPublicEvent"
	PublicAssets_GetPublicAsset_FullMethodName   = "/archivist.v2.PublicAssets/GetPublicAsset"
	PublicAssets_ListPublicEvents_FullMethodName = "/archivist.v2.PublicAssets/ListPublicEvents"
)

// PublicAssetsClient is the client API for PublicAssets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicAssetsClient interface {
	GetPublicEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	GetPublicAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*AssetResponse, error)
	ListPublicEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
}

type publicAssetsClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicAssetsClient(cc grpc.ClientConnInterface) PublicAssetsClient {
	return &publicAssetsClient{cc}
}

func (c *publicAssetsClient) GetPublicEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, PublicAssets_GetPublicEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAssetsClient) GetPublicAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*AssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssetResponse)
	err := c.cc.Invoke(ctx, PublicAssets_GetPublicAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAssetsClient) ListPublicEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, PublicAssets_ListPublicEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicAssetsServer is the server API for PublicAssets service.
// All implementations must embed UnimplementedPublicAssetsServer
// for forward compatibility.
type PublicAssetsServer interface {
	GetPublicEvent(context.Context, *GetEventRequest) (*EventResponse, error)
	GetPublicAsset(context.Context, *GetAssetRequest) (*AssetResponse, error)
	ListPublicEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	mustEmbedUnimplementedPublicAssetsServer()
}

// UnimplementedPublicAssetsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPublicAssetsServer struct{}

func (UnimplementedPublicAssetsServer) GetPublicEvent(context.Context, *GetEventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicEvent not implemented")
}
func (UnimplementedPublicAssetsServer) GetPublicAsset(context.Context, *GetAssetRequest) (*AssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicAsset not implemented")
}
func (UnimplementedPublicAssetsServer) ListPublicEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicEvents not implemented")
}
func (UnimplementedPublicAssetsServer) mustEmbedUnimplementedPublicAssetsServer() {}
func (UnimplementedPublicAssetsServer) testEmbeddedByValue()                      {}

// UnsafePublicAssetsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicAssetsServer will
// result in compilation errors.
type UnsafePublicAssetsServer interface {
	mustEmbedUnimplementedPublicAssetsServer()
}

func RegisterPublicAssetsServer(s grpc.ServiceRegistrar, srv PublicAssetsServer) {
	// If the following call pancis, it indicates UnimplementedPublicAssetsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PublicAssets_ServiceDesc, srv)
}

func _PublicAssets_GetPublicEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAssetsServer).GetPublicEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAssets_GetPublicEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAssetsServer).GetPublicEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAssets_GetPublicAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAssetsServer).GetPublicAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAssets_GetPublicAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAssetsServer).GetPublicAsset(ctx, req.(*GetAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAssets_ListPublicEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAssetsServer).ListPublicEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAssets_ListPublicEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAssetsServer).ListPublicEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicAssets_ServiceDesc is the grpc.ServiceDesc for PublicAssets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicAssets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "archivist.v2.PublicAssets",
	HandlerType: (*PublicAssetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicEvent",
			Handler:    _PublicAssets_GetPublicEvent_Handler,
		},
		{
			MethodName: "GetPublicAsset",
			Handler:    _PublicAssets_GetPublicAsset_Handler,
		},
		{
			MethodName: "ListPublicEvents",
			Handler:    _PublicAssets_ListPublicEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datatrails-common-api/assets/v2/assets/publicassets.proto",
}
